name: Build FreeBSD

on:
  workflow_dispatch:
  pull_request:
  push:
    tags: ["v*.*.*"]

jobs:
  build:
    name: Build / ${{matrix.target}}

    runs-on: ${{matrix.host_os}}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-freebsd
            host_os: ubuntu-latest
         
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{matrix.host_os}}-${{matrix.target}}-mail

      - name: Install Dependencies and Build
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          run: |
            set -eux

            pkg update
            pkg install -y rust foundationdb llvm17-lite
            echo "USE_FOUNDATIONDB=1" >> "$GITHUB_ENV" ; USE_FOUNDATIONDB=1
                  
            target="${{matrix.target}}"
          
            root="${PWD}"
            mkdir artifacts archives
            ext=""

            build() {
              ${{matrix.env}} RUSTFLAGS="-L /usr/local/lib/" cargo build --release "$@"
            }

            artifact() {
              local file="${1}${ext}"
              local name="${root}/archives/${2:-$1}-${target}"
              tar czvf "${name}.tar.gz" "${file}"
              mv "${file}" "${root}/artifacts/${2:-$1}"
            }

            mkdir -p "${root}/target/${target}/release" && cd "${root}"

            # Avoid RocksDB until it successfully builds on FreeBSD
            if [ "${USE_FOUNDATIONDB:-0}" = 1 ]; then
              build -p mail-server --no-default-features --features "sqlite foundationdb postgres mysql elastic s3 redis"
              artifact stalwart-mail stalwart-mail-foundationdb
            fi

            build -p mail-server -p stalwart-cli --no-default-features --features "sqlite postgres mysql elastic s3 redis"

            artifact stalwart-mail
            artifact stalwart-cli

      - name: Upload Archives
        uses: actions/upload-artifact@v3
        with:
          name: archives
          path: ./archives

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.target}}
          path: ./artifacts

  release:
    name: Release

    if: github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: archives
          path: ./archives

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./archives/*
          prerelease: ${{!startsWith(github.ref, 'refs/tags/') == true && true || null}}
          tag_name: ${{!startsWith(github.ref, 'refs/tags/') == true && 'nightly' || null}}
